"""
G√©n√©rateur automatique de vid√©os YouTube Shorts et TikTok
Version simplifi√©e avec Edge TTS (gratuit, sans configuration complexe)
"""

import os
import json
import requests
from datetime import datetime
import random
import asyncio

# ============================================
# CONFIGURATION
# ============================================

OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', '')
PEXELS_API_KEY = os.environ.get('PEXELS_API_KEY', '')

# Th√®mes de faits
THEMES = [
    "science",
    "histoire",
    "animaux",
    "espace",
    "nature",
    "technologie"
]

print("=" * 50)
print("üöÄ D√âMARRAGE DU G√âN√âRATEUR AUTOMATIQUE")
print("=" * 50)

# ============================================
# √âTAPE 1 : R√©cup√©rer un fait v√©rifi√©
# ============================================

def get_verified_fact():
    """R√©cup√®re un fait v√©rifi√© depuis Wikipedia"""
    print("\nüîç Recherche d'un fait int√©ressant...")
    
    url = "https://fr.wikipedia.org/api/rest_v1/page/random/summary"
    
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        
        fact = {
            'title': data.get('title', ''),
            'extract': data.get('extract', ''),
            'source': data.get('content_urls', {}).get('desktop', {}).get('page', '')
        }
        
        print(f"‚úÖ Fait trouv√© : {fact['title']}")
        return fact
        
    except Exception as e:
        print(f"‚ö†Ô∏è Utilisation d'un fait de secours : {e}")
        return {
            'title': 'Le miel ne p√©rime jamais',
            'extract': 'Le miel est le seul aliment qui ne se p√©rime jamais. Des pots de miel vieux de 3000 ans retrouv√©s dans des tombes √©gyptiennes √©taient encore parfaitement comestibles.',
            'source': 'https://fr.wikipedia.org/wiki/Miel'
        }

# ============================================
# √âTAPE 2 : G√©n√©rer le script vid√©o
# ============================================

def generate_script(fact):
    """Utilise l'IA pour cr√©er un script captivant"""
    print("\nüìù G√©n√©ration du script vid√©o...")
    
    if not OPENAI_API_KEY:
        print("‚ö†Ô∏è Pas de cl√© OpenAI - utilisation d'un script par d√©faut")
        return f"Saviez-vous que {fact['extract'][:200]}... Incroyable non ? Abonne-toi pour d√©couvrir d'autres faits surprenants !"
    
    prompt = f"""Cr√©e un script de vid√©o TikTok/YouTube Shorts (30-40 secondes) sur ce fait :

Titre : {fact['title']}
Contenu : {fact['extract']}

Instructions :
- Commence par un HOOK captivant (question choc)
- Style oral, naturel, √©nergique
- 30-40 secondes maximum
- Termine par "Abonne-toi pour plus !"
- UNIQUEMENT le texte √† dire, rien d'autre"""

    headers = {
        'Authorization': f'Bearer {OPENAI_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    data = {
        'model': 'gpt-3.5-turbo',
        'messages': [
            {'role': 'system', 'content': 'Tu cr√©es des scripts viraux pour TikTok.'},
            {'role': 'user', 'content': prompt}
        ],
        'temperature': 0.9,
        'max_tokens': 300
    }
    
    try:
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            script = response.json()['choices'][0]['message']['content'].strip()
            print("‚úÖ Script g√©n√©r√© avec succ√®s")
            return script
        else:
            print(f"‚ö†Ô∏è Erreur API OpenAI ({response.status_code}), script par d√©faut")
            return f"Saviez-vous que {fact['extract'][:150]}... Abonne-toi pour d√©couvrir d'autres faits surprenants !"
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur g√©n√©ration script : {e}")
        return f"D√©couvrez ce fait incroyable : {fact['extract'][:150]}... Pour plus de contenu, abonne-toi !"

# ============================================
# √âTAPE 3 : G√©n√©rer la voix-off (Edge TTS)
# ============================================

async def generate_voiceover_async(script, output_path="voiceover.mp3"):
    """G√©n√®re la voix-off avec Edge TTS (Microsoft, gratuit)"""
    print("\nüé§ G√©n√©ration de la voix-off...")
    
    try:
        import edge_tts
        
        # Voix fran√ßaise naturelle
        voice = "fr-FR-DeniseNeural"  # Voix f√©minine
        
        communicate = edge_tts.Communicate(script, voice)
        await communicate.save(output_path)
        
        print(f"‚úÖ Voix-off cr√©√©e : {output_path}")
        return output_path
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration voix : {e}")
        return None

def generate_voiceover(script, output_path="voiceover.mp3"):
    """Wrapper synchrone pour Edge TTS"""
    return asyncio.run(generate_voiceover_async(script, output_path))

# ============================================
# √âTAPE 4 : T√©l√©charger des visuels
# ============================================

def download_stock_videos(theme, count=2):
    """T√©l√©charge des vid√©os depuis Pexels"""
    print(f"\nüé¨ T√©l√©chargement de vid√©os : {theme}")
    
    if not PEXELS_API_KEY:
        print("‚ö†Ô∏è Pas de cl√© Pexels - vid√©o sans visuels")
        return []
    
    headers = {'Authorization': PEXELS_API_KEY}
    url = f"https://api.pexels.com/videos/search?query={theme}&per_page={count}&orientation=portrait"
    
    try:
        response = requests.get(url, headers=headers, timeout=15)
        videos = response.json().get('videos', [])
        
        video_files = []
        for i, video in enumerate(videos[:count]):
            # Trouver la vid√©o en qualit√© SD (plus rapide)
            video_file = None
            for vf in video.get('video_files', []):
                if vf.get('quality') == 'sd':
                    video_file = vf
                    break
            
            if not video_file and video.get('video_files'):
                video_file = video['video_files'][0]
            
            if video_file:
                video_url = video_file['link']
                filename = f"video_{i}.mp4"
                
                vid_response = requests.get(video_url, timeout=30)
                with open(filename, 'wb') as f:
                    f.write(vid_response.content)
                
                video_files.append(filename)
                print(f"  ‚úÖ T√©l√©charg√© : {filename}")
        
        return video_files
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur t√©l√©chargement : {e}")
        return []

# ============================================
# √âTAPE 5 : Cr√©er la vid√©o finale
# ============================================

def create_video(video_files, voiceover_path, script, output="final_video.mp4"):
    """Assemble la vid√©o avec MoviePy"""
    print("\nüé• Cr√©ation de la vid√©o finale...")
    
    try:
        from moviepy.editor import (VideoFileClip, AudioFileClip, TextClip, 
                                    CompositeVideoClip, concatenate_videoclips, 
                                    ColorClip)
        
        # Charger l'audio
        audio = AudioFileClip(voiceover_path)
        duration = audio.duration
        
        # Si pas de vid√©os, cr√©er un fond color√©
        if not video_files:
            print("‚ö†Ô∏è Cr√©ation d'un fond de couleur")
            video = ColorClip(size=(1080, 1920), color=(20, 20, 40), duration=duration)
        else:
            # Charger et traiter les vid√©os
            clips = []
            for video_file in video_files:
                clip = VideoFileClip(video_file)
                # Redimensionner en format portrait 9:16
                clip = clip.resize(height=1920)
                if clip.w > 1080:
                    clip = clip.crop(x_center=clip.w/2, width=1080, height=1920)
                clips.append(clip)
            
            # Concat√©ner
            video = concatenate_videoclips(clips, method="compose")
            
            # Ajuster √† la dur√©e audio
            if video.duration < duration:
                # Boucler si trop court
                video = video.loop(duration=duration)
            else:
                video = video.subclip(0, duration)
        
        # Ajouter l'audio
        video = video.set_audio(audio)
        
        # Cr√©er sous-titres simplifi√©s (3 mots par √©cran)
        words = script.split()
        subtitle_clips = []
        words_per_screen = 3
        word_duration = duration / (len(words) / words_per_screen)
        
        for i in range(0, len(words), words_per_screen):
            text = ' '.join(words[i:i+words_per_screen])
            
            txt_clip = TextClip(
                text,
                fontsize=60,
                color='white',
                font='Arial-Bold',
                stroke_color='black',
                stroke_width=2,
                size=(1000, None),
                method='caption'
            )
            txt_clip = txt_clip.set_position('center')
            txt_clip = txt_clip.set_duration(word_duration)
            txt_clip = txt_clip.set_start((i/words_per_screen) * word_duration)
            subtitle_clips.append(txt_clip)
        
        # Composer
        final = CompositeVideoClip([video] + subtitle_clips)
        
        # Exporter
        final.write_videofile(
            output,
            fps=24,
            codec='libx264',
            audio_codec='aac',
            preset='ultrafast',
            threads=2
        )
        
        print(f"‚úÖ Vid√©o cr√©√©e : {output}")
        return output
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation vid√©o : {e}")
        import traceback
        traceback.print_exc()
        return None

# ============================================
# FONCTION PRINCIPALE
# ============================================

def main():
    """Fonction principale"""
    
    try:
        # 1. R√©cup√©rer un fait
        fact = get_verified_fact()
        
        # 2. G√©n√©rer le script
        script = generate_script(fact)
        print(f"\nüìÑ Script :\n{script}\n")
        
        # 3. G√©n√©rer la voix-off
        voiceover = generate_voiceover(script)
        
        if not voiceover:
            print("‚ùå Impossible de continuer sans voix-off")
            return
        
        # 4. T√©l√©charger des visuels
        theme = random.choice(THEMES)
        videos = download_stock_videos(theme, count=2)
        
        # 5. Cr√©er la vid√©o
        final_video = create_video(videos, voiceover, script)
        
        if not final_video:
            print("‚ùå √âchec cr√©ation vid√©o")
            return
        
        # 6. Sauvegarder les infos
        title = f"Fait incroyable : {fact['title'][:50]}"
        description = f"{script}\n\nSource : {fact['source']}\n\n#Shorts #FaitsSurprenants #Education"
        
        info = {
            'title': title,
            'description': description,
            'video_path': final_video,
            'date': datetime.now().isoformat()
        }
        
        with open('video_info.json', 'w', encoding='utf-8') as f:
            json.dump(info, f, ensure_ascii=False, indent=2)
        
        print("\n" + "="*50)
        print("‚úÖ VID√âO CR√â√âE AVEC SUCC√àS !")
        print(f"üìÅ Fichier : {final_video}")
        print(f"üìù Titre : {title}")
        print("="*50)
        
        # Note : Upload YouTube/TikTok √† ajouter plus tard
        print("\nüí° Pour publier automatiquement, configurez les APIs YouTube/TikTok")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR G√âN√âRALE : {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
