"""
G√©n√©rateur automatique de vid√©os YouTube Shorts et TikTok
Cr√©e et publie une vid√©o quotidiennement sur des faits surprenants
"""

import os
import json
import requests
from datetime import datetime
from pathlib import Path
import random

# ============================================
# CONFIGURATION - Modifiez ces valeurs
# ============================================

# Ces valeurs seront stock√©es dans les "Secrets" GitHub
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')  # ou ANTHROPIC_API_KEY
GOOGLE_CLOUD_KEY = os.environ.get('GOOGLE_CLOUD_KEY')
YOUTUBE_CLIENT_ID = os.environ.get('YOUTUBE_CLIENT_ID')
YOUTUBE_CLIENT_SECRET = os.environ.get('YOUTUBE_CLIENT_SECRET')
TIKTOK_ACCESS_TOKEN = os.environ.get('TIKTOK_ACCESS_TOKEN')

# Th√®mes de faits (vous pouvez en ajouter)
THEMES = [
    "science incroyable",
    "histoire m√©connue",
    "animaux √©tonnants",
    "espace et astronomie",
    "corps humain",
    "inventions surprenantes",
    "g√©ographie fascinante",
    "records du monde"
]

# ============================================
# √âTAPE 1 : R√©cup√©rer un fait v√©rifi√©
# ============================================

def get_verified_fact():
    """
    R√©cup√®re un fait v√©rifi√© depuis Wikipedia
    """
    print("üîç Recherche d'un fait int√©ressant...")
    
    # API Wikipedia pour r√©cup√©rer un article al√©atoire
    url = "https://fr.wikipedia.org/api/rest_v1/page/random/summary"
    
    try:
        response = requests.get(url)
        data = response.json()
        
        fact = {
            'title': data.get('title', ''),
            'extract': data.get('extract', ''),
            'source': data.get('content_urls', {}).get('desktop', {}).get('page', '')
        }
        
        print(f"‚úÖ Fait trouv√© : {fact['title']}")
        return fact
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration : {e}")
        # Fait de secours
        return {
            'title': 'Le miel ne p√©rime jamais',
            'extract': 'Le miel est le seul aliment qui ne se p√©rime jamais. Des pots de miel vieux de 3000 ans retrouv√©s dans des tombes √©gyptiennes √©taient encore parfaitement comestibles.',
            'source': 'https://fr.wikipedia.org/wiki/Miel'
        }

# ============================================
# √âTAPE 2 : G√©n√©rer le script vid√©o
# ============================================

def generate_script(fact):
    """
    Utilise l'IA pour cr√©er un script captivant de 30-45 secondes
    """
    print("üìù G√©n√©ration du script vid√©o...")
    
    prompt = f"""Cr√©e un script de vid√©o courte (30-45 secondes) sur ce fait :

Titre : {fact['title']}
Contenu : {fact['extract']}

Le script doit :
- Commencer par un HOOK captivant (question ou affirmation choc)
- √ätre au format parl√©, naturel
- Durer entre 30 et 45 secondes √† la lecture
- Se terminer par un appel √† l'action ("Abonne-toi pour plus de faits incroyables !")
- √ätre en fran√ßais

Donne UNIQUEMENT le texte √† dire, sans indication de mise en sc√®ne."""

    # Utilisation de l'API OpenAI (GPT-4 ou GPT-3.5-turbo)
    headers = {
        'Authorization': f'Bearer {OPENAI_API_KEY}',
        'Content-Type': 'application/json'
    }
    
    data = {
        'model': 'gpt-3.5-turbo',  # ou 'gpt-4' si vous avez acc√®s
        'messages': [
            {'role': 'system', 'content': 'Tu es un cr√©ateur de contenus viral pour TikTok et YouTube Shorts.'},
            {'role': 'user', 'content': prompt}
        ],
        'temperature': 0.8
    }
    
    try:
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers=headers,
            json=data
        )
        script = response.json()['choices'][0]['message']['content']
        print("‚úÖ Script g√©n√©r√© avec succ√®s")
        return script
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration script : {e}")
        return f"Saviez-vous que {fact['extract']} Incroyable non ? Abonne-toi pour d√©couvrir d'autres faits surprenants !"

# ============================================
# √âTAPE 3 : G√©n√©rer la voix-off
# ============================================

def generate_voiceover(script, output_path="voiceover.mp3"):
    """
    G√©n√®re la voix-off avec Google Cloud Text-to-Speech
    """
    print("üé§ G√©n√©ration de la voix-off...")
    
    from google.cloud import texttospeech
    
    client = texttospeech.TextToSpeechClient()
    
    synthesis_input = texttospeech.SynthesisInput(text=script)
    
    voice = texttospeech.VoiceSelectionParams(
        language_code="fr-FR",
        name="fr-FR-Neural2-A",  # Voix f√©minine naturelle
        ssml_gender=texttospeech.SsmlVoiceGender.FEMALE
    )
    
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.MP3,
        speaking_rate=1.1,  # L√©g√®rement plus rapide pour TikTok
        pitch=0.0
    )
    
    try:
        response = client.synthesize_speech(
            input=synthesis_input,
            voice=voice,
            audio_config=audio_config
        )
        
        with open(output_path, "wb") as out:
            out.write(response.audio_content)
        
        print(f"‚úÖ Voix-off cr√©√©e : {output_path}")
        return output_path
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration voix : {e}")
        return None

# ============================================
# √âTAPE 4 : T√©l√©charger des visuels
# ============================================

def download_stock_videos(theme, count=3):
    """
    T√©l√©charge des vid√©os stock gratuites depuis Pexels
    """
    print(f"üé¨ T√©l√©chargement de vid√©os sur le th√®me : {theme}")
    
    PEXELS_API_KEY = "VOTRE_CLE_PEXELS"  # Gratuit sur pexels.com/api
    
    headers = {'Authorization': PEXELS_API_KEY}
    url = f"https://api.pexels.com/videos/search?query={theme}&per_page={count}&orientation=portrait"
    
    try:
        response = requests.get(url, headers=headers)
        videos = response.json().get('videos', [])
        
        video_files = []
        for i, video in enumerate(videos[:count]):
            video_url = video['video_files'][0]['link']
            filename = f"video_{i}.mp4"
            
            # T√©l√©charger la vid√©o
            vid_response = requests.get(video_url)
            with open(filename, 'wb') as f:
                f.write(vid_response.content)
            
            video_files.append(filename)
            print(f"  ‚úÖ T√©l√©charg√© : {filename}")
        
        return video_files
        
    except Exception as e:
        print(f"‚ùå Erreur t√©l√©chargement vid√©os : {e}")
        return []

# ============================================
# √âTAPE 5 : Cr√©er la vid√©o finale
# ============================================

def create_video(video_files, voiceover_path, script, output="final_video.mp4"):
    """
    Assemble la vid√©o avec MoviePy : vid√©os + voix + sous-titres
    """
    print("üé• Cr√©ation de la vid√©o finale...")
    
    from moviepy.editor import VideoFileClip, AudioFileClip, TextClip, CompositeVideoClip, concatenate_videoclips
    
    try:
        # Charger l'audio
        audio = AudioFileClip(voiceover_path)
        duration = audio.duration
        
        # Charger et redimensionner les vid√©os en 9:16 (format vertical)
        clips = []
        for video_file in video_files:
            clip = VideoFileClip(video_file)
            clip = clip.resize(height=1920)  # Format portrait
            clip = clip.crop(x_center=clip.w/2, width=1080, height=1920)
            clips.append(clip)
        
        # Concat√©ner les clips pour matcher la dur√©e audio
        video = concatenate_videoclips(clips, method="compose")
        video = video.subclip(0, min(duration, video.duration))
        
        # Ajouter l'audio
        video = video.set_audio(audio)
        
        # G√©n√©rer les sous-titres (simplifi√©)
        words = script.split()
        word_duration = duration / len(words)
        
        subtitle_clips = []
        for i, word in enumerate(words):
            txt_clip = TextClip(
                word,
                fontsize=70,
                color='white',
                font='Arial-Bold',
                stroke_color='black',
                stroke_width=3
            )
            txt_clip = txt_clip.set_position('center').set_duration(word_duration)
            txt_clip = txt_clip.set_start(i * word_duration)
            subtitle_clips.append(txt_clip)
        
        # Composer vid√©o finale
        final = CompositeVideoClip([video] + subtitle_clips)
        
        # Exporter
        final.write_videofile(
            output,
            fps=30,
            codec='libx264',
            audio_codec='aac',
            threads=4
        )
        
        print(f"‚úÖ Vid√©o cr√©√©e : {output}")
        return output
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation vid√©o : {e}")
        return None

# ============================================
# √âTAPE 6 : Publier sur YouTube Shorts
# ============================================

def upload_to_youtube(video_path, title, description):
    """
    Upload sur YouTube via l'API
    """
    print("üì§ Publication sur YouTube Shorts...")
    
    # Configuration OAuth2 et upload
    # (Code simplifi√© - voir documentation YouTube API v3)
    
    try:
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload
        
        youtube = build('youtube', 'v3', credentials=YOUTUBE_CREDENTIALS)
        
        body = {
            'snippet': {
                'title': title,
                'description': description + "\n\n#Shorts #FaitsSurprenants",
                'tags': ['shorts', 'faits', '√©ducation'],
                'categoryId': '27'  # Education
            },
            'status': {
                'privacyStatus': 'public',
                'selfDeclaredMadeForKids': False
            }
        }
        
        media = MediaFileUpload(video_path, resumable=True)
        
        request = youtube.videos().insert(
            part='snippet,status',
            body=body,
            media_body=media
        )
        
        response = request.execute()
        print(f"‚úÖ Publi√© sur YouTube : {response['id']}")
        
    except Exception as e:
        print(f"‚ùå Erreur upload YouTube : {e}")

# ============================================
# √âTAPE 7 : Publier sur TikTok
# ============================================

def upload_to_tiktok(video_path, title):
    """
    Upload sur TikTok via l'API
    """
    print("üì§ Publication sur TikTok...")
    
    # API TikTok n√©cessite OAuth complexe
    # Alternative : utiliser des biblioth√®ques comme TikTokApi
    
    try:
        # Code simplifi√© - voir documentation TikTok Developer
        print("‚ö†Ô∏è TikTok API n√©cessite une configuration avanc√©e")
        print("Alternative : utilisez l'auto-upload de Buffer ou Metricool")
        
    except Exception as e:
        print(f"‚ùå Erreur upload TikTok : {e}")

# ============================================
# FONCTION PRINCIPALE
# ============================================

def main():
    """
    Fonction principale qui orchestre tout le processus
    """
    print("\n" + "="*50)
    print("üöÄ D√âMARRAGE DU G√âN√âRATEUR AUTOMATIQUE")
    print("="*50 + "\n")
    
    # 1. R√©cup√©rer un fait
    fact = get_verified_fact()
    
    # 2. G√©n√©rer le script
    script = generate_script(fact)
    print(f"\nüìÑ Script :\n{script}\n")
    
    # 3. G√©n√©rer la voix-off
    voiceover = generate_voiceover(script)
    
    if not voiceover:
        print("‚ùå Impossible de continuer sans voix-off")
        return
    
    # 4. T√©l√©charger des visuels
    theme = random.choice(THEMES)
    videos = download_stock_videos(theme, count=2)
    
    if not videos:
        print("‚ö†Ô∏è Pas de vid√©os t√©l√©charg√©es, utilisation d'images statiques")
        # TODO: Alternative avec images
    
    # 5. Cr√©er la vid√©o
    final_video = create_video(videos, voiceover, script)
    
    if not final_video:
        print("‚ùå √âchec cr√©ation vid√©o")
        return
    
    # 6. Publier
    title = f"Fait incroyable : {fact['title']}"
    description = f"{script}\n\nSource : {fact['source']}"
    
    upload_to_youtube(final_video, title, description)
    upload_to_tiktok(final_video, title)
    
    print("\n" + "="*50)
    print("‚úÖ PROCESSUS TERMIN√â AVEC SUCC√àS !")
    print("="*50 + "\n")

# ============================================
# EX√âCUTION
# ============================================

if __name__ == "__main__":
    main()
